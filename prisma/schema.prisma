generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  massarCode      String          @unique() @map("massar_code")
  password        String          @map("mot_de_passe")
  role            Role            @map("role")
  hashedRefreshToken  String?
  status          UserStatus      @default(INACTIVE) @map("etat")
  firstName       String          @map("prenom")
  lastName        String          @map("nom")
  bacOption       BacOption?      @map("option_bac")
  city            String?         @map("ville")
  nationalMark    Float?          @map("note_national")
  generalMark     Float?          @map("moyenne_general")
  mathMark        Float?          @map("note_math")
  physicMark      Float?          @map("note_physique")
  svtMark         Float?          @map("note_svt")
  englishMark     Float?          @map("note_anglais")
  philosophyMark  Float?          @map("note_philosophie")
  applications    Application[]

  @@map("utilisateurs")
}

model City {
  id           String            @id @default(uuid())
  name         String            @map("nom")
  citySchools  CitySchool[]
}

model School {
  id                String        @id @default(uuid())
  name              String        @map("nom")
  type              SchoolType    @map("type")
  bacOptionsAllowed BacOption[]   @map("option_bac_autorise")
  isOpen            Boolean       @default(false) @map("est_ouverte")
  citySchools       CitySchool[]
  filieres          Filiere[]

  @@map("ecoles")
}

model CitySchool {
  id       String  @id @default(uuid())
  cityId   String  @map("ville_id")
  schoolId String  @map("ecole_id")
  city     City    @relation(fields: [cityId], references: [id])
  school   School  @relation(fields: [schoolId], references: [id])
  applications   Application[]  

  @@unique([cityId, schoolId])
  @@map("ville_jointure_ecole")
}

model Filiere {
  id             String      @id @default(uuid())
  name           String      @map("nom")
  schoolId       String      @map("ecole_id")
  school         School      @relation(fields: [schoolId], references: [id])
  applications   Application[]  

  @@map("filiere")
}

model Application {
  id               String              @id @default(uuid())
  userId           String              @map("utilisateur_id")
  citySchoolId     String?             @map("city_school_id") // for ENSA/ENCG/ENSAM
  filiereId        String?             @map("filiere_id")      // for EST/FST (national)
  programGroup     SchoolType          @map("groupe_ecole")    // ENSA, EST, ENCG, etc.
  rank             Int?                @map("rang")            // Order in selection
  status           ApplicationStatus   @default(PENDING)
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  student      User         @relation(fields: [userId], references: [id])
  citySchool   CitySchool?  @relation(fields: [citySchoolId], references: [id])
  filiere      Filiere?     @relation(fields: [filiereId], references: [id])

  @@map("applications")
  @@unique([userId, programGroup, rank])
}

enum Role {
  STUDENT
  ADMIN
}

enum BacOption {
  PC
  SVT
  SMA
  ECO
  SMB
  STE
  STM
  SGC
}


enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ApplicationStatus {
  PENDING
  REGISTERED
}

enum SchoolType {
  ENSA
  EST
  ENCG
  ENSAM
  ISPITS
  ISSS
  ISPM
  MEDICAL
}

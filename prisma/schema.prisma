// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  massarCode         String         @unique @map("massar_code")
  password           String         @map("mot_de_passe")
  role               Role           @map("role")
  hashedRefreshToken String?        @map("hashed_refresh_token")
  status             UserStatus     @default(INACTIVE) @map("etat")
  firstName          String         @map("prenom")
  lastName           String         @map("nom")
  bacOptionId        String?        
  bacOption          BacOption?     @relation("UserBacOption", fields: [bacOptionId], references: [id], onDelete: SetNull) 
  city               String?        @map("ville")
  nationalMark       Float?         @map("note_national")
  generalMark        Float?         @map("moyenne_general")
  mathMark           Float?         @map("note_math")
  physicMark         Float?         @map("note_physique")
  svtMark            Float?         @map("note_svt")
  englishMark        Float?         @map("note_anglais")
  philosophyMark     Float?         @map("note_philosophie")
  applications       Application[]

  @@map("utilisateurs")
}

model SchoolType {
  id                            String    @id @default(uuid())
  name                          String    @unique
  code                          String    @unique
  maxCities                     Int?      @map("max_cities")
  requiresCityRanking           Boolean   @default(false) @map("requires_city_ranking")
  maxFilieres                   Int?      @map("max_filieres")
  allowMultipleFilieresSelection Boolean  @default(false) @map("allow_multiple_filieres_selection")
  schools                       School[]
  createdAt                     DateTime  @default(now()) @map("created_at")
  updatedAt                     DateTime  @updatedAt @map("updated_at")

  @@map("school_types")
}

model School {
  id                            String      @id @default(uuid())
  name                          String      @map("nom")
  typeId                        String      @map("type_id")
  type                          SchoolType  @relation(fields: [typeId], references: [id], onDelete: Cascade)
  isOpen                        Boolean     @default(false) @map("est_ouverte")
  maxFilieres                   Int?        @map("max_filieres")
  allowMultipleFilieresSelection Boolean    @default(false) @map("allow_multiple_filieres_selection")
  filieres                      Filiere[]
  applications                  Application[]
  cities                        City[]      @relation("CitySchools")
  bacOptionsAllowed             BacOption[] @relation("SchoolBacOptions")

  @@map("ecoles")
}

model Filiere {
  id                String      @id @default(uuid())
  name              String      @map("nom")
  schoolId          String      @map("ecole_id")
  school            School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  bacOptionsAllowed BacOption[] @relation("FiliereBacOptions")
  choices           ApplicationChoice[]

  @@map("filiere")
}

model Application {
  id              String              @id @default(uuid())
  userId          String              @map("utilisateur_id")
  schoolId        String              @map("ecole_id")
  status          ApplicationStatus   @default(PENDING) @map("statut")
  applicationDate DateTime            @default(now()) @map("date_candidature")
  updatedAt       DateTime            @updatedAt @map("date_mise_a_jour")

  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  school          School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  choices         ApplicationChoice[]

  @@map("candidatures")
  @@unique([userId, schoolId], name: "userId_schoolId")
}

model ApplicationChoice {
  id            String      @id @default(uuid())
  applicationId String      @map("candidature_id")
  rank          Int         @map("rang")
  citySchoolId  String?     @map("ville_ecole_id")
  filiereId     String?     @map("filiere_id")
  type          ChoiceType  @default(FILIERE) @map("type_choix")
  cityId        String?     @map("ville_id")

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  filiere       Filiere?    @relation(fields: [filiereId], references: [id], onDelete: SetNull)
  city          City?       @relation(fields: [cityId], references: [id], name: "CityChoices", onDelete: SetNull)

  @@map("choix_candidature")
  @@unique([applicationId, rank])
}

model City {
  id      String   @id @default(uuid())
  name    String   @unique @map("nom")
  schools School[] @relation("CitySchools")
  choices ApplicationChoice[] @relation("CityChoices")
}

model BacOption {
  id       String    @id @default(uuid())
  name     String    @unique
  users    User[]    @relation("UserBacOption")
  schools  School[]  @relation("SchoolBacOptions")
  filieres Filiere[] @relation("FiliereBacOptions")
}

enum Role {
  STUDENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ApplicationStatus {
  PENDING
  REGISTERED
}

enum ChoiceType {
  CITY
  FILIERE
}
